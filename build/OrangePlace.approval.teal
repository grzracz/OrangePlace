#pragma version 10
intcblock 1 0 4 90 3
bytecblock 0x6f7261 0x636f7374 0x 0x626f6e66697265

// This TEAL was generated by TEALScript v0.105.5
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// src/OrangePlace.algo.ts:11
	// this.ora.value = AssetID.fromUint64(1284444444)
	bytec 0 //  "ora"
	pushint 1284444444
	app_global_put

	// src/OrangePlace.algo.ts:12
	// this.bonfire.value = addr(
	//       'BNFIREKGRXEHCFOEQLTX3PU5SUCMRKDU7WHNBGZA4SXPW42OAHZBP7BPHY',
	//     )
	bytec 3 //  "bonfire"
	pushbytes 0x0b4a8891468dc87115c482e77dbe9d9504c8a874fd8ed09b20e4aefb734e01f2 // addr "BNFIREKGRXEHCFOEQLTX3PU5SUCMRKDU7WHNBGZA4SXPW42OAHZBP7BPHY"
	app_global_put

	// src/OrangePlace.algo.ts:15
	// this.minPayment.value = 1
	bytec 1 //  "cost"
	intc 0 // 1
	app_global_put
	retsub

// createQuadrant(uint64,uint64)void
*abi_route_createQuadrant:
	// y: uint64
	txna ApplicationArgs 2
	btoi

	// x: uint64
	txna ApplicationArgs 1
	btoi

	// execute createQuadrant(uint64,uint64)void
	callsub createQuadrant
	intc 0 // 1
	return

// createQuadrant(x: uint64, y: uint64): void
createQuadrant:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// *if0_condition
	// src/OrangePlace.algo.ts:19
	// !this.app.address.isOptedInToAsset(this.ora.value)
	global CurrentApplicationAddress
	bytec 0 //  "ora"
	app_global_get
	asset_holding_get AssetBalance
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// src/OrangePlace.algo.ts:20
	// sendAssetTransfer({
	//         assetAmount: 0,
	//         assetReceiver: this.app.address,
	//         xferAsset: this.ora.value,
	//         fee: 0,
	//       })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// src/OrangePlace.algo.ts:21
	// assetAmount: 0
	intc 1 // 0
	itxn_field AssetAmount

	// src/OrangePlace.algo.ts:22
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// src/OrangePlace.algo.ts:23
	// xferAsset: this.ora.value
	bytec 0 //  "ora"
	app_global_get
	itxn_field XferAsset

	// src/OrangePlace.algo.ts:24
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if0_end:
	// src/OrangePlace.algo.ts:28
	// assert(x < 3)
	frame_dig -1 // x: uint64
	intc 4 // 3
	<
	assert

	// src/OrangePlace.algo.ts:29
	// assert(y < 3)
	frame_dig -2 // y: uint64
	intc 4 // 3
	<
	assert

	// src/OrangePlace.algo.ts:31
	// key = extract3(itob(x), 7, 1) + extract3(itob(y), 7, 1)
	frame_dig -1 // x: uint64
	itob
	extract 7 1
	frame_dig -2 // y: uint64
	itob
	extract 7 1
	concat
	frame_bury 0 // key: byte[]

	// src/OrangePlace.algo.ts:32
	// assert(!this.quadrants(key).exists)
	frame_dig 0 // key: byte[]
	box_len
	swap
	pop
	!
	assert

	// src/OrangePlace.algo.ts:33
	// this.quadrants(key).create(90 * 90)
	frame_dig 0 // key: byte[]
	pushint 8100
	box_create
	pop
	retsub

// updatePixel(byte[],uint64,uint64,uint64)void
*abi_route_updatePixel:
	// color: uint64
	txna ApplicationArgs 4
	btoi

	// y: uint64
	txna ApplicationArgs 3
	btoi

	// x: uint64
	txna ApplicationArgs 2
	btoi

	// quadrant: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute updatePixel(byte[],uint64,uint64,uint64)void
	callsub updatePixel
	intc 0 // 1
	return

// updatePixel(quadrant: bytes, x: uint64, y: uint64, color: uint64): void
updatePixel:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dup

	// src/OrangePlace.algo.ts:37
	// assert(x < 90)
	frame_dig -2 // x: uint64
	intc 3 // 90
	<
	assert

	// src/OrangePlace.algo.ts:38
	// assert(y < 90)
	frame_dig -3 // y: uint64
	intc 3 // 90
	<
	assert

	// src/OrangePlace.algo.ts:39
	// assert(color < 256)
	frame_dig -4 // color: uint64
	pushint 256
	<
	assert

	// src/OrangePlace.algo.ts:40
	// assert(this.quadrants(quadrant).exists)
	frame_dig -1 // quadrant: bytes
	box_len
	swap
	pop
	assert

	// src/OrangePlace.algo.ts:41
	// assert(this.txn.fee == 0)
	txn Fee
	intc 1 // 0
	==
	assert

	// src/OrangePlace.algo.ts:42
	// assert(this.txn.groupIndex > 0)
	txn GroupIndex
	intc 1 // 0
	>
	assert

	// src/OrangePlace.algo.ts:43
	// payment = this.txnGroup[this.txn.groupIndex - 1]
	txn GroupIndex
	intc 0 // 1
	-
	frame_bury 0 // payment: txn

	// src/OrangePlace.algo.ts:44
	// assert(payment.typeEnum == TransactionType.AssetTransfer)
	frame_dig 0 // payment: txn
	gtxns TypeEnum
	intc 2 //  axfer
	==
	assert

	// src/OrangePlace.algo.ts:45
	// assert(payment.xferAsset == this.ora.value)
	frame_dig 0 // payment: txn
	gtxns XferAsset
	bytec 0 //  "ora"
	app_global_get
	==
	assert

	// src/OrangePlace.algo.ts:46
	// assert(payment.assetAmount >= this.minPayment.value)
	frame_dig 0 // payment: txn
	gtxns AssetAmount
	bytec 1 //  "cost"
	app_global_get
	>=
	assert

	// src/OrangePlace.algo.ts:47
	// assert(payment.assetReceiver == this.app.address)
	frame_dig 0 // payment: txn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// src/OrangePlace.algo.ts:49
	// index = y * 90 + x
	frame_dig -3 // y: uint64
	intc 3 // 90
	*
	frame_dig -2 // x: uint64
	+
	frame_bury 1 // index: uint64

	// src/OrangePlace.algo.ts:50
	// this.quadrants(quadrant).splice(index, 1, extract3(itob(color), 7, 1))
	frame_dig -1 // quadrant: bytes
	frame_dig 1 // index: uint64
	intc 0 // 1
	frame_dig -4 // color: uint64
	itob
	extract 7 1
	box_splice

	// *if1_condition
	// src/OrangePlace.algo.ts:52
	// payment.assetAmount > this.minPayment.value
	frame_dig 0 // payment: txn
	gtxns AssetAmount
	bytec 1 //  "cost"
	app_global_get
	>
	bz *if1_else

	// *if1_consequent
	// src/OrangePlace.algo.ts:53
	// sendAssetTransfer({
	//         assetAmount: payment.assetAmount - this.minPayment.value,
	//         assetReceiver: this.txn.sender,
	//         xferAsset: this.ora.value,
	//         fee: 0,
	//       })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// src/OrangePlace.algo.ts:54
	// assetAmount: payment.assetAmount - this.minPayment.value
	frame_dig 0 // payment: txn
	gtxns AssetAmount
	bytec 1 //  "cost"
	app_global_get
	-
	itxn_field AssetAmount

	// src/OrangePlace.algo.ts:55
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// src/OrangePlace.algo.ts:56
	// xferAsset: this.ora.value
	bytec 0 //  "ora"
	app_global_get
	itxn_field XferAsset

	// src/OrangePlace.algo.ts:57
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	b *if1_end

*if1_else:
	// src/OrangePlace.algo.ts:60
	// sendAssetTransfer({
	//         assetAmount: this.app.address.assetBalance(this.ora.value),
	//         assetReceiver: this.bonfire.value,
	//         xferAsset: this.ora.value,
	//         fee: 0,
	//       })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// src/OrangePlace.algo.ts:61
	// assetAmount: this.app.address.assetBalance(this.ora.value)
	global CurrentApplicationAddress
	bytec 0 //  "ora"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// src/OrangePlace.algo.ts:62
	// assetReceiver: this.bonfire.value
	bytec 3 //  "bonfire"
	app_global_get
	itxn_field AssetReceiver

	// src/OrangePlace.algo.ts:63
	// xferAsset: this.ora.value
	bytec 0 //  "ora"
	app_global_get
	itxn_field XferAsset

	// src/OrangePlace.algo.ts:64
	// fee: 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	// src/OrangePlace.algo.ts:68
	// this.minPayment.value += 1
	bytec 1 //  "cost"
	app_global_get
	intc 0 // 1
	+
	bytec 1 //  "cost"
	swap
	app_global_put
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x9dd6993c // method "createQuadrant(uint64,uint64)void"
	pushbytes 0xe6922ec0 // method "updatePixel(byte[],uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createQuadrant *abi_route_updatePixel

	// this contract does not implement the given ABI method for call NoOp
	err